diff -Nur v2017.09/arch/arm/dts/sun50i-a64.dtsi v2017.09-mtd-nor-v2/arch/arm/dts/sun50i-a64.dtsi
--- v2017.09/arch/arm/dts/sun50i-a64.dtsi	2017-10-10 18:02:22.000000000 +0400
+++ v2017.09-mtd-nor-v2/arch/arm/dts/sun50i-a64.dtsi	2017-10-11 12:37:50.314078728 +0400
@@ -445,5 +445,13 @@
 			interrupt-controller;
 			#interrupt-cells = <3>;
 		};
+
+		spi0: spi@01c68000 {
+			compatible = "allwinner,sun50i-a64-spi";
+			reg = <0x01c68000 0x1000>;
+			status = "disabled";
+			#address-cells = <1>;
+			#size-cells = <0>;
+		};
 	};
 };
diff -Nur v2017.09/arch/arm/dts/sun50i-h5-orangepi-zero-plus2.dts v2017.09-mtd-nor-v2/arch/arm/dts/sun50i-h5-orangepi-zero-plus2.dts
--- v2017.09/arch/arm/dts/sun50i-h5-orangepi-zero-plus2.dts	2017-10-10 18:02:22.000000000 +0400
+++ v2017.09-mtd-nor-v2/arch/arm/dts/sun50i-h5-orangepi-zero-plus2.dts	2017-10-11 12:37:50.314078728 +0400
@@ -53,6 +53,7 @@
 
 	aliases {
 		serial0 = &uart0;
+		spi0 = &spi0;
 	};
 
 	chosen {
@@ -67,6 +68,19 @@
 	};
 };
 
+&pio {
+	spi0_pins: pinctrl {
+		pins = "PC0", "PC1", "PC2", "PC3";
+		drive-strength = <10>;
+		bias-disable;
+	};
+};
+
+&spi0 {
+	pinctrl-0 = <&spi0_pins>;
+	status = "okay";
+};
+
 &mmc0 {
 	compatible = "allwinner,sun50i-h5-mmc",
 		     "allwinner,sun50i-a64-mmc",
diff -Nur v2017.09/arch/arm/dts/sun8i-h2-plus-orangepi-zero.dts v2017.09-mtd-nor-v2/arch/arm/dts/sun8i-h2-plus-orangepi-zero.dts
--- v2017.09/arch/arm/dts/sun8i-h2-plus-orangepi-zero.dts	2017-10-10 18:02:22.000000000 +0400
+++ v2017.09-mtd-nor-v2/arch/arm/dts/sun8i-h2-plus-orangepi-zero.dts	2017-10-11 12:37:50.314078728 +0400
@@ -59,6 +59,7 @@
 		serial0 = &uart0;
 		/* ethernet0 is the H3 emac, defined in sun8i-h3.dtsi */
 		ethernet1 = &xr819;
+		spi0 = &spi0;
 	};
 
 	chosen {
@@ -95,6 +96,19 @@
 	};
 };
 
+&pio {
+	spi0_pins: pinctrl {
+		pins = "PC0", "PC1", "PC2", "PC3";
+		drive-strength = <10>;
+		bias-disable;
+	};
+};
+
+&spi0 {
+	pinctrl-0 = <&spi0_pins>;
+	status = "okay";
+};
+
 &ehci1 {
 	status = "okay";
 };
diff -Nur v2017.09/arch/arm/dts/sun8i-h3.dtsi v2017.09-mtd-nor-v2/arch/arm/dts/sun8i-h3.dtsi
--- v2017.09/arch/arm/dts/sun8i-h3.dtsi	2017-10-10 18:02:22.000000000 +0400
+++ v2017.09-mtd-nor-v2/arch/arm/dts/sun8i-h3.dtsi	2017-10-11 12:37:50.314078728 +0400
@@ -158,6 +158,14 @@
 			#dma-cells = <1>;
 		};
 
+		spi0: spi@01c68000 {
+			compatible = "allwinner,sun8i-h3-spi";
+			reg = <0x01c68000 0x1000>;
+			status = "disabled";
+			#address-cells = <1>;
+			#size-cells = <0>;
+		};
+
 		mmc0: mmc@01c0f000 {
 			compatible = "allwinner,sun7i-a20-mmc",
 				     "allwinner,sun5i-a13-mmc";
diff -Nur v2017.09/arch/arm/include/asm/arch-sunxi/clock_sun6i.h v2017.09-mtd-nor-v2/arch/arm/include/asm/arch-sunxi/clock_sun6i.h
--- v2017.09/arch/arm/include/asm/arch-sunxi/clock_sun6i.h	2017-10-10 19:02:16.000000000 +0400
+++ v2017.09-mtd-nor-v2/arch/arm/include/asm/arch-sunxi/clock_sun6i.h	2017-10-11 12:37:50.314078728 +0400
@@ -291,6 +291,8 @@
 #define AHB_GATE_OFFSET_USB0		25
 #define AHB_GATE_OFFSET_SATA		24
 #endif
+#define AHB_GATE_OFFSET_SPI1		21
+#define AHB_GATE_OFFSET_SPI0		20
 #define AHB_GATE_OFFSET_MCTL		14
 #define AHB_GATE_OFFSET_GMAC		17
 #define AHB_GATE_OFFSET_NAND0		13
diff -Nur v2017.09/arch/arm/include/asm/arch-sunxi/clock_sun9i.h v2017.09-mtd-nor-v2/arch/arm/include/asm/arch-sunxi/clock_sun9i.h
--- v2017.09/arch/arm/include/asm/arch-sunxi/clock_sun9i.h	2017-10-10 18:02:22.000000000 +0400
+++ v2017.09-mtd-nor-v2/arch/arm/include/asm/arch-sunxi/clock_sun9i.h	2017-10-11 12:37:50.314078728 +0400
@@ -195,6 +195,10 @@
 
 /* ahb gate1 field */
 #define AHB_GATE_OFFSET_DMA		24
+#define AHB_GATE_OFFSET_SPI3		23
+#define AHB_GATE_OFFSET_SPI2		22
+#define AHB_GATE_OFFSET_SPI1		21
+#define AHB_GATE_OFFSET_SPI0		20
 
 /* apb1_gate fields */
 #define APB1_GATE_UART_SHIFT		16
diff -Nur v2017.09/arch/arm/include/asm/arch-sunxi/gpio.h v2017.09-mtd-nor-v2/arch/arm/include/asm/arch-sunxi/gpio.h
--- v2017.09/arch/arm/include/asm/arch-sunxi/gpio.h	2017-10-10 18:02:22.000000000 +0400
+++ v2017.09-mtd-nor-v2/arch/arm/include/asm/arch-sunxi/gpio.h	2017-10-11 12:37:50.314078728 +0400
@@ -240,4 +240,8 @@
 static inline int axp_gpio_init(void) { return 0; }
 #endif
 
+int sunxi_gpio_parse_pin_name(const char *pin_name);
+int sunxi_gpio_setup_dt_pins(const void * volatile fdt_blob, int node,
+			     const char * mux_name, int mux_sel);
+
 #endif /* _SUNXI_GPIO_H */
diff -Nur v2017.09/arch/arm/include/asm/arch-sunxi/spi.h v2017.09-mtd-nor-v2/arch/arm/include/asm/arch-sunxi/spi.h
--- v2017.09/arch/arm/include/asm/arch-sunxi/spi.h	1970-01-01 04:00:00.000000000 +0400
+++ v2017.09-mtd-nor-v2/arch/arm/include/asm/arch-sunxi/spi.h	2017-10-11 12:37:50.314078728 +0400
@@ -0,0 +1,29 @@
+/*
+ * (C) Copyright 2017 Whitebox Systems / Northend Systems B.V.
+ * S.J.R. van Schaik <stephan@whiteboxsystems.nl>
+ * M.B.W. Wajer <merlijn@whiteboxsystems.nl>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef _SUNXI_SPI_H
+#define _SUNXI_SPI_H
+
+#if defined(CONFIG_MACH_SUN6I) || defined(CONFIG_MACH_SUN8I) || \
+	defined(CONFIG_MACH_SUN9I) || defined(CONFIG_MACH_SUN50I)
+#include <asm/arch/spi_sun6i.h>
+#else
+#include <asm/arch/spi_sun4i.h>
+#endif
+
+#define SUNXI_SPI_BURST_CNT(cnt)	((cnt) & 0xffffff)
+#define SUNXI_SPI_XMIT_CNT(cnt)		((cnt) & 0xffffff)
+
+#define SUNXI_SPI_CLK_CTL_CDR2_MASK	0xff
+#define SUNXI_SPI_CLK_CTL_CDR2(div)	((div) & SUNXI_SPI_CLK_CTL_CDR2_MASK)
+#define SUNXI_SPI_CLK_CTL_CDR1_MASK	0xf
+#define SUNXI_SPI_CLK_CTL_CDR1(div)		\
+	(((div) & SUNXI_SPI_CLK_CTL_CDR1_MASK) << 8)
+#define SUNXI_SPI_CLK_CTL_DRS		BIT(12)
+
+#endif /* _SUNXI_SPI_H */
diff -Nur v2017.09/arch/arm/include/asm/arch-sunxi/spi_sun4i.h v2017.09-mtd-nor-v2/arch/arm/include/asm/arch-sunxi/spi_sun4i.h
--- v2017.09/arch/arm/include/asm/arch-sunxi/spi_sun4i.h	1970-01-01 04:00:00.000000000 +0400
+++ v2017.09-mtd-nor-v2/arch/arm/include/asm/arch-sunxi/spi_sun4i.h	2017-10-11 12:37:50.318078855 +0400
@@ -0,0 +1,53 @@
+/*
+ * (C) Copyright 2017 Whitebox Systems / Northend Systems B.V.
+ * S.J.R. van Schaik <stephan@whiteboxsystems.nl>
+ * M.B.W. Wajer <merlijn@whiteboxsystems.nl>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef _SUNXI_SPI_SUN4I_H
+#define _SUNXI_SPI_SUN4I_H
+
+struct sunxi_spi_regs {
+	uint32_t rx_data;	/* 0x00 */
+	uint32_t tx_data;	/* 0x04 */
+	union {
+		uint32_t glb_ctl;
+		uint32_t xfer_ctl;
+		uint32_t fifo_ctl;
+		uint32_t burst_ctl;
+	};			/* 0x08 */
+	uint32_t int_ctl;	/* 0x0c */
+	uint32_t int_sta;	/* 0x10 */
+	uint32_t dma_ctl;	/* 0x14 */
+	uint32_t wait;		/* 0x18 */
+	uint32_t clk_ctl;	/* 0x1c */
+	uint32_t burst_cnt;	/* 0x20 */
+	uint32_t xmit_cnt;	/* 0x24 */
+	uint32_t fifo_sta;	/* 0x28 */
+};
+
+#define SUNXI_SPI_CTL_SRST		0
+
+#define SUNXI_SPI_CTL_ENABLE		BIT(0)
+#define SUNXI_SPI_CTL_MASTER		BIT(1)
+#define SUNXI_SPI_CTL_CPHA		BIT(2)
+#define SUNXI_SPI_CTL_CPOL		BIT(3)
+#define SUNXI_SPI_CTL_CS_ACTIVE_LOW	BIT(4)
+#define SUNXI_SPI_CTL_TF_RST		BIT(8)
+#define SUNXI_SPI_CTL_RF_RST		BIT(9)
+#define SUNXI_SPI_CTL_XCH		BIT(10)
+#define SUNXI_SPI_CTL_CS_MASK		0x3000
+#define SUNXI_SPI_CTL_CS(cs)		(((cs) << 12) & SUNXI_SPI_CTL_CS_MASK)
+#define SUNXI_SPI_CTL_DHB		BIT(15)
+#define SUNXI_SPI_CTL_CS_MANUAL		BIT(16)
+#define SUNXI_SPI_CTL_CS_LEVEL		BIT(17)
+#define SUNXI_SPI_CTL_TP		BIT(18)
+
+#define SUNXI_SPI_FIFO_RF_CNT_MASK	0x7f
+#define SUNXI_SPI_FIFO_RF_CNT_BITS	0
+#define SUNXI_SPI_FIFO_TF_CNT_MASK	0x7f
+#define SUNXI_SPI_FIFO_TF_CNT_BITS	16
+
+#endif /* _SUNXI_SPI_SUN4I_H */
diff -Nur v2017.09/arch/arm/include/asm/arch-sunxi/spi_sun6i.h v2017.09-mtd-nor-v2/arch/arm/include/asm/arch-sunxi/spi_sun6i.h
--- v2017.09/arch/arm/include/asm/arch-sunxi/spi_sun6i.h	1970-01-01 04:00:00.000000000 +0400
+++ v2017.09-mtd-nor-v2/arch/arm/include/asm/arch-sunxi/spi_sun6i.h	2017-10-11 12:37:50.318078855 +0400
@@ -0,0 +1,56 @@
+/*
+ * (C) Copyright 2017 Whitebox Systems / Northend Systems B.V.
+ * S.J.R. van Schaik <stephan@whiteboxsystems.nl>
+ * M.B.W. Wajer <merlijn@whiteboxsystems.nl>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef _SUNXI_SPI_SUN6I_H
+#define _SUNXI_SPI_SUN6I_H
+
+struct sunxi_spi_regs {
+	uint32_t unused0[1];
+	uint32_t glb_ctl;	/* 0x04 */
+	uint32_t xfer_ctl;	/* 0x08 */
+	uint32_t unused1[1];
+	uint32_t int_ctl;	/* 0x10 */
+	uint32_t int_sta;	/* 0x14 */
+	uint32_t fifo_ctl;	/* 0x18 */
+	uint32_t fifo_sta;	/* 0x1c */
+	uint32_t wait;		/* 0x20 */
+	uint32_t clk_ctl;	/* 0x24 */
+	uint32_t unused2[2];
+	uint32_t burst_cnt;	/* 0x30 */
+	uint32_t xmit_cnt;	/* 0x34 */
+	uint32_t burst_ctl;	/* 0x38 */
+	uint32_t unused3[113];
+	uint32_t tx_data;	/* 0x200 */
+	uint32_t unused4[63];
+	uint32_t rx_data;	/* 0x300 */
+};
+
+#define SUNXI_SPI_CTL_ENABLE		BIT(0)
+#define SUNXI_SPI_CTL_MASTER		BIT(1)
+#define SUNXI_SPI_CTL_TP		BIT(7)
+#define SUNXI_SPI_CTL_SRST		BIT(31)
+
+#define SUNXI_SPI_CTL_CPHA		BIT(0)
+#define SUNXI_SPI_CTL_CPOL		BIT(1)
+#define SUNXI_SPI_CTL_CS_ACTIVE_LOW	BIT(2)
+#define SUNXI_SPI_CTL_CS_MASK		0x30
+#define SUNXI_SPI_CTL_CS(cs)		(((cs) << 4) & SUNXI_SPI_CTL_CS_MASK)
+#define SUNXI_SPI_CTL_CS_MANUAL		BIT(6)
+#define SUNXI_SPI_CTL_CS_LEVEL		BIT(7)
+#define SUNXI_SPI_CTL_DHB		BIT(8)
+#define SUNXI_SPI_CTL_XCH		BIT(31)
+
+#define SUNXI_SPI_CTL_RF_RST		BIT(15)
+#define SUNXI_SPI_CTL_TF_RST		BIT(31)
+
+#define SUNXI_SPI_FIFO_RF_CNT_MASK	0x7f
+#define SUNXI_SPI_FIFO_RF_CNT_BITS	0
+#define SUNXI_SPI_FIFO_TF_CNT_MASK	0x7f
+#define SUNXI_SPI_FIFO_TF_CNT_BITS	16
+
+#endif /* _SUNXI_SPI_SUN6I_H */
diff -Nur v2017.09/arch/arm/mach-sunxi/pinmux.c v2017.09-mtd-nor-v2/arch/arm/mach-sunxi/pinmux.c
--- v2017.09/arch/arm/mach-sunxi/pinmux.c	2017-10-10 18:02:22.000000000 +0400
+++ v2017.09-mtd-nor-v2/arch/arm/mach-sunxi/pinmux.c	2017-10-11 12:37:50.318078855 +0400
@@ -9,6 +9,9 @@
 #include <common.h>
 #include <asm/io.h>
 #include <asm/arch/gpio.h>
+#include <fdtdec.h>
+#include <fdt_support.h>
+#include <dt-bindings/pinctrl/sun4i-a10.h>
 
 void sunxi_gpio_set_cfgbank(struct sunxi_gpio *pio, int bank_offset, u32 val)
 {
@@ -69,3 +72,77 @@
 
 	return 0;
 }
+
+int sunxi_gpio_parse_pin_name(const char *pin_name)
+{
+	int pin;
+
+	if (pin_name[0] != 'P')
+		return -1;
+
+	if (pin_name[1] < 'A' || pin_name[1] > 'Z')
+		return -1;
+
+	pin = (pin_name[1] - 'A') << 5;
+	pin += simple_strtol(&pin_name[2], NULL, 10);
+
+	return pin;
+}
+
+int sunxi_gpio_setup_dt_pins(const void * volatile fdt_blob, int node,
+			     const char * mux_name, int mux_sel)
+{
+	int drive, pull, pin, i;
+	const char *pin_name;
+	int offset;
+
+	offset = fdtdec_lookup_phandle(fdt_blob, node, "pinctrl-0");
+	if (offset < 0)
+		return offset;
+
+	drive = fdt_getprop_u32_default_node(fdt_blob, offset, 0,
+					     "drive-strength", 0);
+	if (drive) {
+		if (drive <= 10)
+			drive = SUN4I_PINCTRL_10_MA;
+		else if (drive <= 20)
+			drive = SUN4I_PINCTRL_20_MA;
+		else if (drive <= 30)
+			drive = SUN4I_PINCTRL_30_MA;
+		else
+			drive = SUN4I_PINCTRL_40_MA;
+	} else {
+		drive = fdt_getprop_u32_default_node(fdt_blob, offset, 0,
+						     "allwinner,drive", 4);
+	}
+
+	if (fdt_get_property(fdt_blob, offset, "bias-pull-up", NULL))
+		pull = SUN4I_PINCTRL_PULL_UP;
+	else if (fdt_get_property(fdt_blob, offset, "bias-disable", NULL))
+		pull = SUN4I_PINCTRL_NO_PULL;
+	else if (fdt_get_property(fdt_blob, offset, "bias-pull-down", NULL))
+		pull = SUN4I_PINCTRL_PULL_DOWN;
+	else
+		pull = fdt_getprop_u32_default_node(fdt_blob, offset, 0,
+						    "allwinner,pull", 0);
+
+	for (i = 0; ; i++) {
+		pin_name = fdt_stringlist_get(fdt_blob, offset,
+					      "allwinner,pins", i, NULL);
+		if (!pin_name) {
+			pin_name = fdt_stringlist_get(fdt_blob, offset,
+						      "pins", i, NULL);
+			if (!pin_name)
+				break;
+		}
+		pin = sunxi_gpio_parse_pin_name(pin_name);
+		if (pin < 0)
+			continue;
+
+		sunxi_gpio_set_cfgpin(pin, mux_sel);
+		sunxi_gpio_set_drv(pin, drive);
+		sunxi_gpio_set_pull(pin, pull);
+	}
+
+	return i;
+}
diff -Nur v2017.09/configs/orangepi_zero_defconfig v2017.09-mtd-nor-v2/configs/orangepi_zero_defconfig
--- v2017.09/configs/orangepi_zero_defconfig	2017-10-10 19:02:16.000000000 +0400
+++ v2017.09-mtd-nor-v2/configs/orangepi_zero_defconfig	2017-10-11 12:37:50.318078855 +0400
@@ -1,5 +1,6 @@
 CONFIG_ARM=y
 CONFIG_ARCH_SUNXI=y
+CONFIG_FIT=y
 CONFIG_SPL_SPI_FLASH_SUPPORT=y
 CONFIG_MACH_SUN8I_H3=y
 CONFIG_DRAM_CLK=408
@@ -10,6 +11,8 @@
 # CONFIG_SYS_MALLOC_CLEAR_ON_INIT is not set
 CONFIG_CONSOLE_MUX=y
 CONFIG_SPL=y
+CONFIG_CMD_SF=y
+CONFIG_CMD_SPI=y
 CONFIG_SYS_CLK_FREQ=480000000
 # CONFIG_CMD_IMLS is not set
 # CONFIG_CMD_FLASH is not set
@@ -18,3 +21,8 @@
 CONFIG_SUN8I_EMAC=y
 CONFIG_USB_EHCI_HCD=y
 CONFIG_SYS_USB_EVENT_POLL_VIA_INT_QUEUE=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH=y
+CONFIG_SPI_FLASH_MACRONIX=y
+CONFIG_DM_SPI=y
+CONFIG_SUNXI_SPI=y
diff -Nur v2017.09/configs/orangepi_zero_plus2_spinor_defconfig v2017.09-mtd-nor-v2/configs/orangepi_zero_plus2_spinor_defconfig
--- v2017.09/configs/orangepi_zero_plus2_spinor_defconfig	1970-01-01 04:00:00.000000000 +0400
+++ v2017.09-mtd-nor-v2/configs/orangepi_zero_plus2_spinor_defconfig	2017-10-11 12:48:34.126286340 +0400
@@ -0,0 +1,36 @@
+CONFIG_ARM=y
+CONFIG_ARCH_SUNXI=y
+CONFIG_SPL_SPI_FLASH_SUPPORT=y
+CONFIG_MACH_SUN50I_H5=y
+CONFIG_DRAM_CLK=672
+CONFIG_DRAM_ZQ=3881977
+CONFIG_MMC0_CD_PIN="PH13"
+CONFIG_MMC_SUNXI_SLOT_EXTRA=2
+CONFIG_DEFAULT_DEVICE_TREE="sun50i-h5-orangepi-zero-plus2"
+# CONFIG_SYS_MALLOC_CLEAR_ON_INIT is not set
+CONFIG_SPL=y
+# CONFIG_CMD_IMLS is not set
+# CONFIG_CMD_FLASH is not set
+# CONFIG_CMD_FPGA is not set
+CONFIG_CMD_SF=y
+CONFIG_CMD_SPI=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_MTDIDS_DEFAULT="nor0=spi-flash0.0"
+CONFIG_MTDPARTS_DEFAULT="mtdparts=spi-flash0.0:704k(u-boot),64k(u-boot-env),64k(boot),4096k(kernel),128k(script),24576k(rootfs),-(overlay)"
+CONFIG_CMD_UBI=y
+# CONFIG_SPL_DOS_PARTITION is not set
+# CONFIG_SPL_ISO_PARTITION is not set
+# CONFIG_SPL_EFI_PARTITION is not set
+CONFIG_ENV_IS_IN_SPI_FLASH=y
+CONFIG_ENV_OFFSET=0xb0000
+CONFIG_ENV_SIZE=0x10000
+CONFIG_SPI_FLASH=y
+CONFIG_SPI_FLASH_BAR=y
+CONFIG_SPI_FLASH_MACRONIX=y
+CONFIG_SPI_FLASH_WINBOND=y
+CONFIG_SPI_FLASH_MTD=y
+CONFIG_SPL_SPI_SUNXI=y
+CONFIG_SUN8I_EMAC=y
+CONFIG_DM_SPI=y
+CONFIG_SUNXI_SPI=y
+CONFIG_USB_EHCI_HCD=y
diff -Nur v2017.09/drivers/mtd/spi/sf_probe.c v2017.09-mtd-nor-v2/drivers/mtd/spi/sf_probe.c
--- v2017.09/drivers/mtd/spi/sf_probe.c	2017-10-10 18:02:22.000000000 +0400
+++ v2017.09-mtd-nor-v2/drivers/mtd/spi/sf_probe.c	2017-10-11 12:37:50.318078855 +0400
@@ -81,9 +81,23 @@
 {
 	struct spi_slave *bus;
 
+#ifdef CONFIG_DM_SPI
+	int ret;
+	char name[30], *str;
+	struct udevice *dev;
+
+	snprintf(name, sizeof(name), "generic_%d:%d", busnum, cs);
+	str = strdup(name);
+	ret = spi_get_bus_and_cs(busnum, cs, max_hz, spi_mode,
+				  "spi_generic_drv", str, &dev, &bus);
+	if (ret)
+		return NULL;
+#else
 	bus = spi_setup_slave(busnum, cs, max_hz, spi_mode);
 	if (!bus)
 		return NULL;
+#endif
+
 	return spi_flash_probe_tail(bus);
 }
 
@@ -105,7 +119,10 @@
 #ifdef CONFIG_SPI_FLASH_MTD
 	spi_flash_mtd_unregister();
 #endif
+	spi_release_bus(flash->spi);
+#ifndef CONFIG_DM_SPI
 	spi_free_slave(flash->spi);
+#endif
 	free(flash);
 }
 
diff -Nur v2017.09/drivers/spi/Kconfig v2017.09-mtd-nor-v2/drivers/spi/Kconfig
--- v2017.09/drivers/spi/Kconfig	2017-10-10 18:02:22.000000000 +0400
+++ v2017.09-mtd-nor-v2/drivers/spi/Kconfig	2017-10-11 12:37:50.318078855 +0400
@@ -132,6 +132,11 @@
 	  used to access the SPI NOR flash chips on platforms embedding
 	  this ST IP core.
 
+config SUNXI_SPI
+	bool "Allwinner SPI driver"
+	help
+	  Enable the Allwinner SPI driver.
+
 config TEGRA114_SPI
 	bool "nVidia Tegra114 SPI driver"
 	help
diff -Nur v2017.09/drivers/spi/Makefile v2017.09-mtd-nor-v2/drivers/spi/Makefile
--- v2017.09/drivers/spi/Makefile	2017-10-10 18:02:22.000000000 +0400
+++ v2017.09-mtd-nor-v2/drivers/spi/Makefile	2017-10-11 12:37:50.318078855 +0400
@@ -42,6 +42,7 @@
 obj-$(CONFIG_SH_SPI) += sh_spi.o
 obj-$(CONFIG_SH_QSPI) += sh_qspi.o
 obj-$(CONFIG_STM32_QSPI) += stm32_qspi.o
+obj-$(CONFIG_SUNXI_SPI) += sunxi_spi.o
 obj-$(CONFIG_TEGRA114_SPI) += tegra114_spi.o
 obj-$(CONFIG_TEGRA20_SFLASH) += tegra20_sflash.o
 obj-$(CONFIG_TEGRA20_SLINK) += tegra20_slink.o
diff -Nur v2017.09/drivers/spi/sunxi_spi.c v2017.09-mtd-nor-v2/drivers/spi/sunxi_spi.c
--- v2017.09/drivers/spi/sunxi_spi.c	1970-01-01 04:00:00.000000000 +0400
+++ v2017.09-mtd-nor-v2/drivers/spi/sunxi_spi.c	2017-10-11 12:37:50.318078855 +0400
@@ -0,0 +1,363 @@
+/*
+ * (C) Copyright 2017 Whitebox Systems / Northend Systems B.V.
+ * S.J.R. van Schaik <stephan@whiteboxsystems.nl>
+ * M.B.W. Wajer <merlijn@whiteboxsystems.nl>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <dm.h>
+#include <errno.h>
+#include <spi.h>
+
+#include <asm/bitops.h>
+#include <asm/gpio.h>
+#include <asm/io.h>
+
+#include <asm/arch/clock.h>
+#include <asm/arch/spi.h>
+
+#define SUNXI_SPI_MAX_RATE (24 * 1000 * 1000)
+#define SUNXI_SPI_MIN_RATE (3 * 1000)
+
+struct sunxi_spi_platdata {
+	struct sunxi_spi_regs *regs;
+	unsigned int activate_delay_us;
+	unsigned int deactivate_delay_us;
+	uint32_t freq;
+};
+
+struct sunxi_spi_priv {
+	struct sunxi_spi_regs *regs;
+	unsigned int max_freq;
+	unsigned int last_transaction_us;
+};
+
+DECLARE_GLOBAL_DATA_PTR;
+
+static int sunxi_spi_parse_pins(struct udevice *bus)
+{
+	unsigned int pin_func = SUNXI_GPC_SPI0;
+	int ret;
+
+	if (IS_ENABLED(CONFIG_MACH_SUN50I))
+		pin_func = SUN50I_GPC_SPI0;
+
+	ret = sunxi_gpio_setup_dt_pins(gd->fdt_blob, dev_of_offset(bus), NULL,
+		pin_func);
+
+	if (ret < 0) {
+		printf("WARNING: sunxi-spi: cannot find pinctrl-0 node\n");
+		return ret;
+	}
+
+	if (!ret) {
+		printf("WARNING: sunxi-spi: cannot find pins property\n");
+		return -2;
+	}
+
+	return ret;
+}
+
+static void sunxi_spi_enable_clock(struct udevice *bus)
+{
+	struct sunxi_ccm_reg * const ccm =
+		(struct sunxi_ccm_reg * const)SUNXI_CCM_BASE;
+
+#if defined(CONFIG_MACH_SUN6I) || defined(CONFIG_MACH_SUN8I) || \
+	defined(CONFIG_MACH_SUN9I) || defined(CONFIG_MACH_SUN50I)
+	setbits_le32(&ccm->ahb_reset0_cfg,
+		(1 << AHB_GATE_OFFSET_SPI0));
+#endif
+
+	setbits_le32(&ccm->ahb_gate0, (1 << AHB_GATE_OFFSET_SPI0));
+	writel((1 << 31), &ccm->spi0_clk_cfg);
+}
+
+static void sunxi_spi_disable_clock(void)
+{
+	struct sunxi_ccm_reg * const ccm =
+		(struct sunxi_ccm_reg * const)SUNXI_CCM_BASE;
+
+	writel(0, &ccm->spi0_clk_cfg);
+	clrbits_le32(&ccm->ahb_gate0, (1 << AHB_GATE_OFFSET_SPI0));
+
+#if defined(CONFIG_MACH_SUN6I) || defined(CONFIG_MACH_SUN8I) || \
+	defined(CONFIG_MACH_SUN9I) || defined(CONFIG_MACH_SUN50I)
+	clrbits_le32(&ccm->ahb_reset0_cfg,
+		(1 << AHB_GATE_OFFSET_SPI0));
+#endif
+}
+
+static void sunxi_spi_cs_activate(struct udevice *dev, unsigned int cs)
+{
+	struct udevice *bus = dev->parent;
+	struct sunxi_spi_platdata *plat = dev_get_platdata(bus);
+	struct sunxi_spi_priv *priv = dev_get_priv(bus);
+	uint32_t reg;
+
+	/* If it is too soon to perform another transaction, wait. */
+	if (plat->deactivate_delay_us && priv->last_transaction_us) {
+		unsigned int delay_us;
+
+		delay_us = timer_get_us() - priv->last_transaction_us;
+
+		if (delay_us < plat->deactivate_delay_us)
+			udelay(plat->deactivate_delay_us - delay_us);
+	}
+
+	debug("%s: activate cs: %u, bus: '%s'\n", __func__, cs, bus->name);
+
+	reg = readl(&priv->regs->xfer_ctl);
+	reg &= ~(SUNXI_SPI_CTL_CS_MASK | SUNXI_SPI_CTL_CS_LEVEL);
+	reg |= SUNXI_SPI_CTL_CS(cs);
+	writel(reg, &priv->regs->xfer_ctl);
+
+	if (plat->activate_delay_us)
+		udelay(plat->activate_delay_us);
+}
+
+static void sunxi_spi_cs_deactivate(struct udevice *dev, unsigned int cs)
+{
+	struct udevice *bus = dev->parent;
+	struct sunxi_spi_platdata *plat = dev_get_platdata(bus);
+	struct sunxi_spi_priv *priv = dev_get_priv(bus);
+	uint32_t reg;
+
+	debug("%s: deactivate cs: %u, bus: '%s'\n", __func__, cs, bus->name);
+	
+	reg = readl(&priv->regs->xfer_ctl);
+	reg &= ~SUNXI_SPI_CTL_CS_MASK;
+	reg |= SUNXI_SPI_CTL_CS_LEVEL;
+	writel(reg, &priv->regs->xfer_ctl);
+
+	/* 
+	 * Remember the time of this transaction so that we can honour the bus
+	 * delay.
+	 */
+	if (plat->deactivate_delay_us)
+		priv->last_transaction_us = timer_get_us();
+}
+
+static int sunxi_spi_ofdata_to_platdata(struct udevice *bus)
+{
+	struct sunxi_spi_platdata *plat = dev_get_platdata(bus);
+	const void *blob = gd->fdt_blob;
+	int node = dev_of_offset(bus);
+
+	plat->regs = (struct sunxi_spi_regs *)devfdt_get_addr(bus);
+	plat->activate_delay_us = fdtdec_get_int(
+		blob, node, "spi-activate_delay", 0);
+	plat->deactivate_delay_us = fdtdec_get_int(
+		blob, node, "spi-deactivate-delay", 0);
+
+	debug("%s: regs=%p, activate-delay=%u, deactivate-delay=%u\n",
+		__func__, plat->regs, plat->activate_delay_us,
+		plat->deactivate_delay_us);
+
+	return 0;
+}
+
+static int sunxi_spi_probe(struct udevice *bus)
+{
+	struct sunxi_spi_platdata *plat = dev_get_platdata(bus);
+	struct sunxi_spi_priv *priv = dev_get_priv(bus);
+
+	debug("%s: probe\n", __func__);
+
+	priv->regs = plat->regs;
+	priv->last_transaction_us = timer_get_us();
+
+	return 0;
+}
+
+static int sunxi_spi_claim_bus(struct udevice *dev)
+{
+	struct udevice *bus = dev->parent;
+	struct sunxi_spi_priv *priv = dev_get_priv(bus);
+	unsigned int pin_func = SUNXI_GPC_SPI0;
+
+	debug("%s: claiming bus\n", __func__);
+
+	sunxi_spi_parse_pins(bus);
+	sunxi_spi_enable_clock(bus);
+	setbits_le32(&priv->regs->glb_ctl, SUNXI_SPI_CTL_MASTER |
+		SUNXI_SPI_CTL_ENABLE | SUNXI_SPI_CTL_TP | SUNXI_SPI_CTL_SRST);
+
+	if (IS_ENABLED(CONFIG_SUNXI_GEN_SUN6I))
+		while (readl(&priv->regs->glb_ctl) & SUNXI_SPI_CTL_SRST)
+			;
+
+	setbits_le32(&priv->regs->xfer_ctl, SUNXI_SPI_CTL_CS_MANUAL |
+		SUNXI_SPI_CTL_CS_LEVEL);
+	setbits_le32(&priv->regs->fifo_ctl, SUNXI_SPI_CTL_RF_RST |
+		SUNXI_SPI_CTL_TF_RST);
+
+	return 0;
+}
+
+static int sunxi_spi_release_bus(struct udevice *dev)
+{
+	struct udevice *bus = dev->parent;
+	struct sunxi_spi_priv *priv = dev_get_priv(bus);
+
+	debug("%s: releasing bus\n", __func__);
+
+	clrbits_le32(&priv->regs->glb_ctl, SUNXI_SPI_CTL_MASTER |
+		SUNXI_SPI_CTL_ENABLE);
+	sunxi_spi_disable_clock();
+
+	return 0;
+}
+
+static void sunxi_spi_write(struct udevice *dev, const char *tx_buf,
+	size_t nbytes)
+{
+	struct udevice *bus = dev->parent;
+	struct sunxi_spi_priv *priv = dev_get_priv(bus);
+	size_t i;
+	char byte;
+
+	if (!tx_buf)
+		nbytes = 0;
+
+	writel(SUNXI_SPI_XMIT_CNT(nbytes), &priv->regs->xmit_cnt);
+
+	if (IS_ENABLED(CONFIG_SUNXI_GEN_SUN6I))
+		writel(SUNXI_SPI_BURST_CNT(nbytes), &priv->regs->burst_ctl);
+
+	for (i = 0; i < nbytes; ++i) {
+		byte = tx_buf ? *tx_buf++ : 0;
+		writeb(byte, &priv->regs->tx_data);
+	}
+}
+
+static int sunxi_spi_xfer(struct udevice *dev, unsigned int bitlen,
+	const void *dout, void *din, unsigned long flags)
+{
+	struct udevice *bus = dev->parent;
+	struct sunxi_spi_priv *priv = dev_get_priv(bus);
+	struct dm_spi_slave_platdata *slave_plat = dev_get_parent_platdata(dev);
+	const char *tx_buf = dout;
+	char *rx_buf = din;
+	size_t len = bitlen / 8;
+	size_t i, nbytes;
+	char byte;
+
+	if (bitlen % 8) {
+		debug("%s: non byte-aligned SPI transfer.\n", __func__);
+		return -1;
+	}
+
+	if (flags & SPI_XFER_BEGIN)
+		sunxi_spi_cs_activate(dev, slave_plat->cs);
+
+	while (len) {
+		nbytes = min(len, (size_t) 64);
+
+		writel(SUNXI_SPI_BURST_CNT(nbytes), &priv->regs->burst_cnt);
+		sunxi_spi_write(dev, tx_buf, nbytes);
+		tx_buf += nbytes;
+		setbits_le32(&priv->regs->xfer_ctl, SUNXI_SPI_CTL_XCH);
+
+		while (((readl(&priv->regs->fifo_sta) &
+			SUNXI_SPI_FIFO_RF_CNT_MASK) >>
+			SUNXI_SPI_FIFO_RF_CNT_BITS) < nbytes)
+			;
+
+		for (i = 0; i < nbytes; ++i) {
+			byte = readb(&priv->regs->rx_data);
+
+			if (rx_buf)
+				*rx_buf++ = byte;
+		}
+
+		len -= nbytes;
+	}
+
+	if (flags & SPI_XFER_END)
+		sunxi_spi_cs_deactivate(dev, slave_plat->cs);
+
+	return 0;
+}
+
+static int sunxi_spi_set_speed(struct udevice *bus, uint speed)
+{
+	struct sunxi_spi_priv *priv = dev_get_priv(bus);
+	unsigned int div;
+	uint32_t reg;
+
+	speed = min(speed, (unsigned int)SUNXI_SPI_MAX_RATE);
+	speed = max((unsigned int)SUNXI_SPI_MIN_RATE, speed);
+
+	div = SUNXI_SPI_MAX_RATE / (2 * speed);
+
+	if (div <= (SUNXI_SPI_CLK_CTL_CDR2_MASK + 1)) {
+		if (div > 0)
+			div--;
+
+		reg = SUNXI_SPI_CLK_CTL_CDR2(div) | SUNXI_SPI_CLK_CTL_DRS;
+	} else {
+		div = __ilog2(SUNXI_SPI_MAX_RATE) - __ilog2(speed);
+		reg = SUNXI_SPI_CLK_CTL_CDR1(div);
+	}
+
+	writel(reg, &priv->regs->clk_ctl);
+
+	debug("%s: speed=%u\n", __func__, speed);
+
+	return 0;
+}
+
+static int sunxi_spi_set_mode(struct udevice *bus, uint mode)
+{
+	struct sunxi_spi_priv *priv = dev_get_priv(bus);
+	uint32_t reg;
+
+	reg = readl(&priv->regs->xfer_ctl);
+	reg &= ~(SUNXI_SPI_CTL_CPOL | SUNXI_SPI_CTL_CPHA |
+		SUNXI_SPI_CTL_CS_ACTIVE_LOW);
+
+	if (mode & SPI_CPOL)
+		reg |= SUNXI_SPI_CTL_CPOL;
+
+	if (mode & SPI_CPHA)
+		reg |= SUNXI_SPI_CTL_CPHA;
+
+	if (!(mode & SPI_CS_HIGH))
+		reg |= SUNXI_SPI_CTL_CS_ACTIVE_LOW;
+
+	writel(reg, &priv->regs->xfer_ctl);
+
+	debug("%s: mode=%d\n", __func__, mode);
+
+	return 0;
+}
+
+static const struct dm_spi_ops sunxi_spi_ops = {
+	.claim_bus	= sunxi_spi_claim_bus,
+	.release_bus	= sunxi_spi_release_bus,
+	.xfer		= sunxi_spi_xfer,
+	.set_speed	= sunxi_spi_set_speed,
+	.set_mode	= sunxi_spi_set_mode,
+};
+
+static const struct udevice_id sunxi_spi_ids[] = {
+	{ .compatible = "allwinner,sun4i-a10-spi" },
+	{ .compatible = "allwinner,sun6i-a31-spi" },
+	{ .compatible = "allwinner,sun8i-h3-spi" },
+	{ .compatible = "allwinner,sun50i-a64-spi" },
+	{ }
+};
+
+U_BOOT_DRIVER(sunxi_spi) = {
+	.name	= "sunxi_spi",
+	.id	= UCLASS_SPI,
+	.of_match = sunxi_spi_ids,
+	.ops	= &sunxi_spi_ops,
+	.ofdata_to_platdata = sunxi_spi_ofdata_to_platdata,
+	.platdata_auto_alloc_size = sizeof(struct sunxi_spi_platdata),
+	.priv_auto_alloc_size = sizeof(struct sunxi_spi_priv),
+	.probe	= sunxi_spi_probe,
+};
diff -Nur v2017.09/include/configs/sunxi-common.h v2017.09-mtd-nor-v2/include/configs/sunxi-common.h
--- v2017.09/include/configs/sunxi-common.h	2017-10-10 19:02:16.000000000 +0400
+++ v2017.09-mtd-nor-v2/include/configs/sunxi-common.h	2017-10-11 12:46:22.702200426 +0400
@@ -157,9 +157,16 @@
 #define CONFIG_SYS_MMC_ENV_DEV		0	/* first detected MMC controller */
 #define CONFIG_SYS_MMC_MAX_DEVICE	4
 #elif defined(CONFIG_ENV_IS_NOWHERE)
-#define CONFIG_ENV_SIZE			(128 << 10)
+#define CONFIG_ENV_SIZE			0x10000 /* 64 KiB */
 #endif
 
+#define CONFIG_ENV_SECT_SIZE CONFIG_ENV_SIZE
+
+/*
+#define CONFIG_ENV_SECT_SIZE		(64 << 10)
+#define CONFIG_ENV_SIZE			CONFIG_ENV_SECT_SIZE
+*/
+
 #ifndef CONFIG_MACH_SUN8I_V3S
 /* 64MB of malloc() pool */
 #define CONFIG_SYS_MALLOC_LEN		(CONFIG_ENV_SIZE + (64 << 20))
@@ -421,12 +428,24 @@
 #define BOOTENV_DEV_NAME_FEL(devtypeu, devtypel, instance) \
 	"fel "
 
+/* SPI boot support, auto-execute boot.scr if a script address was provided */
+#define BOOTENV_DEV_SPINOR(devtypeu, devtypel, instance) \
+	"bootcmd_spinor=" \
+		"echo '(SPI NOR boot)'; " \
+		"sf probe; mtdparts; " \
+		"sf read ${scriptaddr} boot 10000; " \
+		"source ${scriptaddr}; " \
+		"\0"
+#define BOOTENV_DEV_NAME_SPINOR(devtypeu, devtypel, instance) \
+	"spinor "
+
 #define BOOT_TARGET_DEVICES(func) \
 	func(FEL, fel, na) \
 	BOOT_TARGET_DEVICES_MMC(func) \
 	BOOT_TARGET_DEVICES_MMC_EXTRA(func) \
 	BOOT_TARGET_DEVICES_SCSI(func) \
 	BOOT_TARGET_DEVICES_USB(func) \
+	func(SPINOR, spinor, na) \
 	func(PXE, pxe, na) \
 	func(DHCP, dhcp, na)
 
@@ -511,4 +530,6 @@
 #define CONFIG_EXTRA_ENV_SETTINGS
 #endif
 
+#define CONFIG_MTD_PARTITIONS
+
 #endif /* _SUNXI_COMMON_CONFIG_H */
